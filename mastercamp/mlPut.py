import spacy
import pytextrank
import sys
import json

# Définir les valeurs par défaut
event_first_player = "Ruud"
event_second_player = "Djokovic"
event_final_result = "6-3, 6-3, 6-3"
event_winner = "Djokovic"
scores = "6-3, 6-3, 6-3"
event_date = "2023-06-11"
tournament_name = "ATP French Open"

# Vérifier si des arguments sont passés
if len(sys.argv) > 1:
    # Récupérer les arguments de ligne de commande
    event_first_player = sys.argv[1]
    # event_second_player = sys.argv[2]
    # event_final_result = sys.argv[3]
    # event_winner = sys.argv[4]
    # scores = sys.argv[5]
    # event_date = sys.argv[6]
    # tournament_name = sys.argv[7]

# Load the large English language model
nlp = spacy.load("en_core_web_lg")

# Add TextRank algorithm to the pipeline
nlp.add_pipe("textrank")

texte = "During the " + tournament_name + " tennis competition, an exciting showdown took place between two talented players, " + event_first_player + " and " + event_second_player + ". This match was a spectacle of captivating moments, filled with tension, excitement, and brilliant displays of skill. Let's dive into the highlights of this epic encounter that kept tennis fans on the edge of their seats.\n\nBoth protagonists, " + event_first_player + " and " + event_second_player + ", approached this match with determination and ambition. They were both eager to prove their worth on the " + tournament_name + " court, garnering the attention of tennis enthusiasts worldwide.\n\nThe first set immediately captured the spectators' attention. The rallies were intense, with precise shots and swift movements. " + event_first_player + " and " + event_second_player + " engaged in a relentless battle, each trying to gain the upper hand. Ultimately, after a fierce struggle, the score favored " + event_winner + ".\n\nThe second set was equally captivating. The two players continued to clash with high intensity, seeking to exploit each other's weaknesses. The rallies were filled with strategic plays, featuring variations in pace and powerful shots. This set concluded with a score of " + scores + " in favor of " + event_winner + \
    ".\n\nAs the match progressed, the tension escalated on the court. Spectators hung on every shot, admiring the talent and tenacity displayed by both players. Every point was crucial, and the fight for victory was more intense than ever.\n\nThe third set proved to be the decisive turning point of the match. Both players pushed themselves to their limits, showcasing unwavering determination. The rallies were spectacular, featuring winning shots and impressive defenses. The score remained tight throughout the set, creating an electric atmosphere on the court.\n\nUltimately, after a grueling battle, " + event_winner + " managed to gain the advantage and claim the set with a score of " + scores + ". This victory propelled " + event_winner + " closer to the finish line, but " + event_second_player + \
    "/" + event_first_player + " refused to be defeated and continued to fight until the last point.\n\nThis thrilling tennis match between " + event_first_player + " and " + event_second_player + " at " + tournament_name + " was a true sporting spectacle. Both players showcased their talent, endurance, and fighting spirit throughout the encounter. This match will be remembered as an example of the beauty of tennis and the healthy rivalry between athletes.\n\nWhether you're a tennis enthusiast or a sports fan in general, this unforgettable duel between " + \
    event_first_player + " and " + event_second_player + " at " + tournament_name + \
    " provided moments of pure joy and excitement. It demonstrates the universal appeal of this sport, capable of transporting us and making us thrill with each exchange."

# Execute the Spacy pipeline with the TextRank algorithm
doc = nlp(texte)

# Create a list to store the summary sentences
summary_sentences = []

# Store the summary sentences generated by TextRank
for sent in doc._.textrank.summary(limit_phrases=50, limit_sentences=50):
    summary_sentences.append(sent.text)


# Create a dictionary to store the summary data
summary_data = {
    "summary_sentences": summary_sentences,
    "event_first_player": event_first_player,
    "event_second_player": event_second_player,
    "event_final_result": event_final_result,
    "event_winner": event_winner,
    "scores": scores,
    "event_date": event_date,
    "tournament_name": tournament_name
}

# Convert the summary data to JSON format
summary_json = json.dumps(summary_data)

# Print the summary data
print(summary_json)
